<?xml version="1.0"?>

<project name="vaadin-client-compiler" basedir="." default="publish-local"
    xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        Compiles build helpers used when building other
        modules.
    </description>
    <include file="../common.xml" as="common" />
    <include file="../build.xml" as="vaadin" />
    <include file="../gwt-files.xml" as="gwtfiles" />

    <!-- global properties -->
    <property name="module.name" value="vaadin-client-compiler" />
    <property name="module.symbolic" value="com.vaadin.client-compiler" />
    <property name="result.dir" value="result" />
    <path id="classpath.compile.custom">
        <fileset file="${gwt.dev.jar}" />
    </path>
    <path id="classpath.test.custom">
        <fileset dir="${result.dir}/classes">
            <include name="**/*" />
        </fileset>
    </path>
    <property name="extra.classes" value="**/*.properties" />
    <!-- don't try to copy the same files twice (first from classes and then 
        from sources) in order for the build not to fail when packaging the JAR -->
    <property name="jar.exclude" value="**/*.properties" />
    <union id="compiler.includes">
        <union refid="client-compiler.gwt.includes" />
        <fileset dir="${result.dir}">
            <include name="com/google/gwt/dev/About.properties" />
        </fileset>
    </union>

    <target name="jar">
        <!-- Get Git revision -->
        <exec executable="git" outputproperty="git.revision"
            failifexecutionfails="false" errorproperty="">
            <arg value="describe" />
            <arg value="--tags" />
            <arg value="--always" />
            <arg value="HEAD" />
        </exec>

        <echo file="${result.dir}/com/google/gwt/dev/About.properties">gwt.version=${vaadin.version}
            gwt.svnrev=${git.revision}</echo>

        <antcall target="common.jar">
            <reference refid="compiler.includes" torefid="extra.jar.includes" />
        </antcall>

    </target>

    <target name="publish-local" depends="jar">
        <antcall target="common.sources.jar">
            <reference torefid="extra.jar.includes" refid="compiler.includes" />
        </antcall>
        <antcall target="common.javadoc.jar" />

        <antcall target="common.publish-local" />
    </target>

    <target name="clean">
        <antcall target="common.clean" />
    </target>

    <target name="checkstyle">
        <antcall target="common.checkstyle">
            <param name="cs.src" location="src" />
        </antcall>
    </target>

    <target name="test" depends="checkstyle">
        <antcall target="common.test.run" />
        <!--<echo>WHAT? No tests for ${module.name}!</echo> -->
    </target>

</project>
